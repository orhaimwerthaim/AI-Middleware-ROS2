[Variables]
parameter:
type: float
name: theta

termination_mode:
type: bool
name: success
default_code: #_default_value is used if 'success' was not set until the end of the skill execution
_default_value = False


[Events]
[Actions]
action: action_activation
label: start_execution
imports: [from turtlesim.action import RotateAbsolute]
action_path: /turtle1/rotate_absolute
action_type: RotateAbsolute
send_goal_code:
_goal_msg = RotateAbsolute.Goal()
_goal_msg.theta = theta

self._action_client.wait_for_server()

self._send_goal_future = self._action_client.send_goal_async(
    _goal_msg,
    feedback_callback=self.feedback_callback
)
self._send_goal_future.add_done_callback(self.goal_response_callback)


goal_response_code:
goal_handle = future.result()
if not goal_handle.accepted:
    self.get_logger().info('Goal rejected :(')
    return

self.get_logger().info('Goal accepted :)')
self._get_result_future = goal_handle.get_result_async()
self._get_result_future.add_done_callback(self.get_result_callback)

goal_result_code:
_result = future.result().result
self.get_logger().info(f'Result: {_result}')
rclpy.shutdown()

feedback_code:
_feedback = feedback_msg.feedback
self.get_logger().info(f'Received feedback: {_feedback}')


